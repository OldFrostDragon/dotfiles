[user]
    name = OldFrostDragon
    email = shevchukvb@gmail.com

[core]
    autocrlf = input
    excludesfile = ~/.gitexcludes
    editor = vim

[credential]
    helper = cache --timeout=300

[status]
    submoduleSummary = true

[fetch]
    prune = true

[push]
    default = simple
    ; Check that all submodules have been properly pushed before pushing the
    ; main project.
    recurseSubmodules = check
    autoSetupRemote = true

[pull]
    rebase = true

[rerere]
    enabled = true

[rebase]
    ; Automatically stash before a rebase and unstash afterwards.
    autoStash = true
    ; automatically apply fixups
    autosquash = true
    
[merge]
    keepBackup = false;
    tool = p4merge

[mergetool]
    prompt = false

[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[difftool]
    prompt = false

# [diff]
#     tool = p4merge
#     submodule = log
#     renames = copies
#     renameLimit = 10000
       
# [difftool "p4merge"]
#        cmd = p4merge "$LOCAL" "$REMOTE"
#        keepTemporaries = false
#        trustExitCode = false
#        keepBackup = false

[diff]
    tool = difftastic

[difftool "difftastic"]
    cmd = difft "$LOCAL" "$REMOTE"

[pager]
    difftool = true

[alias]
    dt = difftool
    authors = "!git log --pretty=format:%aN | sort | uniq -c | sort -rn"
    conflicts = diff --name-only --diff-filter=U --relative
    ignored = ls-files --exclude-standard --ignored --others
    # logs
    l = "!git --no-pager log -20 --pretty='format:%C(yellow)%h %C(green)%ai %C(bold blue)%an %C(red)%d%C(reset) %s'; echo"
    ll = log --pretty='format:%C(yellow)%h %C(green)%ai %C(bold blue)%an %C(red)%d%C(reset) %s'
    lf = log --name-status --pretty='format:%C(yellow)%h %C(green)%ai %C(bold blue)%an %C(red)%d%C(reset) %s'
    lp = log --patch --format=fuller
    lg = log --graph --pretty='format:%C(yellow)%h %C(green)%ai %C(bold blue)%an %C(red)%d%C(reset) %s'
    lga = log --graph --branches --remotes --tags --pretty='format:%C(yellow)%h %C(green)%ai %C(bold blue)%an %C(red)%d%C(reset) %s'

    # wip commits
    undo = reset HEAD~1 --mixed
    wip = "!git add --all && git commit -m 'WIP'"
    rewip = "!f() { text=$(git show -s --format=%s); if [ \"$text\" = \"WIP\" ]; then git add --all && git commit --amend --no-edit; fi; }; f"

    # merge request checkout from Gitlab. Use 'git mr 5' to checkout merge request with id 5 to local branch
    mr = !sh -c 'git fetch origin merge-requests/$1/head:mr-origin-$1 && git checkout mr-origin-$1' -

    # (fzf) switch to local branch
    sw = "!f() { selected_br=$(git branch --sort=committerdate | fzf --height=20% --reverse --info=inline); if [ ! -z $selected_br ]; then git checkout $selected_br; fi; }; f"

[format]
    pretty = "Commit:  %C(yellow)%H%nAuthor:  %C(green)%aN <%aE>%nDate:    (%C(red)%ar%Creset) %ai%nSubject: %s%n%n%b"

[color "diff"]
    plain = normal
    meta = bold
    frag = cyan
    old = red
    new = green
    commit = yellow
    whitespace = normal red

[color "branch"]
    current = green
    local = normal
    remote = red
    plain = normal

[color "status"]
    header = normal
    added = red
    updated = green
    changed = red
    untracked = red
    nobranch = red

[color "grep"]
    match = normal

[color "interactive"]
    prompt = normal
    header = normal
    help = normal
    error = normal

[init]
    defaultBranch = master

[include]
    path = ~/.gitconfig-local
